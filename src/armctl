#!/usr/bin/env python

import sys
import math
import signal

import rospy
from sensor_msgs.msg import JointState
from std_msgs.msg import Header

from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *


class Window(QWidget):
    def __init__(self, parent=None):
        super(Window, self).__init__(parent)

        self.maxValue = 100.0
        self.resize(320,240)
        self.setWindowTitle("Arm Control")
        layout = QVBoxLayout()
        self.setLayout(layout)
        mast_label = QLabel("Mast")
        self.mast_slider = self.createSlider()
        pan_label = QLabel("Pan")
        self.pan_slider = self.createSlider()
        tilt_label = QLabel("Tilt")
        self.tilt_slider = self.createSlider()
        layout.addWidget(mast_label)
        layout.addWidget(self.mast_slider)
        layout.addWidget(pan_label)
        layout.addWidget(self.pan_slider)
        layout.addWidget(tilt_label)
        layout.addWidget(self.tilt_slider)
        self.pub = rospy.Publisher('/joint_states', JointState, queue_size=1)
        rospy.init_node('arm4dof', anonymous=True)
        self.show()

    def createSlider(self):
        slider = QSlider(Qt.Horizontal)
        slider.setMinimum(-self.maxValue)
        slider.setMaximum(self.maxValue)
        slider.setSingleStep(1)
        slider.valueChanged.connect(self.onSliderValueChanged)
        return slider

    @pyqtSlot()
    def onSliderValueChanged(self):
        joint = JointState()
        joint.header = Header()
        joint.header.stamp = rospy.Time.now()
        joint0 = self.mast_slider.value() * math.pi / self.maxValue
        joint1 = -self.mast_slider.value() * math.pi / self.maxValue
        joint2 = self.tilt_slider.value() * math.pi / self.maxValue
        joint3 = self.pan_slider.value() * math.pi / self.maxValue
        joint.name = ['joint0', 'joint1', 'joint2', 'joint3']
        joint.position = [joint0, joint1, joint2, joint3]
        joint.velocity = []
        joint.effort = []
        self.pub.publish(joint)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = Window()
    # Re-install default handler for SIGINT to allow control-C to exit
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    sys.exit(app.exec_())

